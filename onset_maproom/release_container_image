#!/bin/bash

set -e
set -x

fail() {
  echo $*
  exit 1
}

git_repo=x24-vector
project_dir=onset_maproom
imagename=onsetmr
registry=iridl
githost=git@bitbucket.org:iridl
labelnamespace=edu.columbia.iri.iridl

cleanup() {
    # output to /dev/null to supress confusing message "Not logged in"
    # when script exits before completing the login step.
    docker logout > /dev/null
    [[ -n "$builddir" ]] && rm -rf $builddir
}

trap cleanup EXIT


# Doing this up front so we don't have to sit around and wait for the
# build to finish first.
docker login

builddir=$(mktemp --tmpdir=/tmp --directory build-$project_dir.XXXXXXXXXX) || fail "failed to create build dir"
git clone --recurse-submodules $githost/$git_repo $builddir || fail "clone failed"
# Can't use --depth 1 because it sometimes causes builds that use git-generate-version-info to fail.
# Can't use --shallow-submodules because the version of git in CentOS 7 is too old.

cd $builddir/$git_dir

commithash=$(git log -1 --pretty=%h) || fail "failed to get git commit hash"

# Don't overwrite an existing version tag
existing_tags=$(curl -s https://registry.hub.docker.com/v1/repositories/$registry/$imagename/tags) || \
    fail "Couldn't fetch existing tags."
echo $existing_tags | grep \"$commithash\" > /dev/null && \
    fail "There is already an image tagged $commithash."


docker build \
  -t $registry/$imagename:latest \
  -t $registry/$imagename:$commithash \
  --label $labelnamespace.$imagename.git-commit=$commithash \
  . \
  || fail "build failed"

for tag in latest $commithash; do
    docker push $registry/$imagename:$tag || fail "failed to push $tag"
done
