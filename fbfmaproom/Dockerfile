# centos:stream10-minimal as of 2025-02-21
ARG CENTOS_HASH="sha256:9988cb7d26aa993e932b9ba6dd0f2a125141c09c64609551369444e79c9deadd"

# Dependencies that are used in both build stage and final stage
FROM quay.io/centos/centos@${CENTOS_HASH} as common

# mesa-libGL is a dependency of opencv that is not packaged for conda (see
# https://conda-forge.org/docs/maintainer/knowledge_base.html#core-dependency-tree-packages-cdts)
RUN dnf4 install -y httpd mesa-libGL

RUN rm -r /etc/httpd/conf.d/* /etc/httpd/conf.modules.d



FROM common as build

# httpd-devel and gcc are to support building mod_wsgi from source.
RUN dnf4 install -y httpd-devel gcc

# miniconda
RUN curl -L \
    https://repo.anaconda.com/miniconda/Miniconda3-py310_23.1.0-1-Linux-x86_64.sh \
    -o /miniconda-installer.sh
RUN bash /miniconda-installer.sh -b -p /conda
RUN eval "$('/conda/bin/conda' 'shell.bash' 'hook' 2> /dev/null)" && \
    conda config --set auto_update_conda False && \
    conda install -c conda-forge conda conda-lock

# build conda environment
COPY conda-lock.yml /build/conda-lock.yml
RUN eval "$('/conda/bin/conda' 'shell.bash' 'hook' 2> /dev/null)" && \
    conda-lock install --no-dev -n app /build/conda-lock.yml && \
    conda clean -afy

# mod_wsgi: use pip to compile mod_wsgi from source for the particular versions
# of apache and python that we're using.
RUN eval "$('/conda/bin/conda' 'shell.bash' 'hook' 2> /dev/null)" && \
    conda activate app && \
    pip install mod_wsgi==4.9.4



FROM common

COPY --from=build /conda /conda

# httpd config
COPY docker/httpd.conf /etc/httpd/conf/httpd.conf

# The following is bad security practice if running httpd as
# root, but we will run it as apache.
RUN chmod g+rwx /run/httpd

# install application
COPY ./ /app/

USER apache:apache
WORKDIR /app
ENTRYPOINT ["/app/docker/entrypoint"]
CMD ["/app/docker/service"]
